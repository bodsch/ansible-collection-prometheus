{% if alertmanager_receivers is defined and
      alertmanager_receivers | count > 0 %}

# A list of notification receivers.
receivers:
  {% for name, values  in alertmanager_receivers.items() %}
  - name: {{ name }}
    {% if values | count > 0 %}
    {{ values | to_nice_yaml(indent=2, sort_keys=False) | indent(width=6, first=False, blank=False) }}
    {% else %}

    {% endif %}
  {% endfor %}
{% endif %}
{#
# The unique name of the receiver.
name: <string>

# Configurations for several notification integrations.
email_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = false ]

  # The email address to send notifications to.
  to: <tmpl_string>

  # The sender's address.
  [ from: <tmpl_string> | default = global.smtp_from ]

  # The SMTP host through which emails are sent.
  [ smarthost: <string> | default = global.smtp_smarthost ]

  # The hostname to identify to the SMTP server.
  [ hello: <string> | default = global.smtp_hello ]

  # SMTP authentication information.
  # auth_password and auth_password_file are mutually exclusive.
  [ auth_username: <string> | default = global.smtp_auth_username ]
  [ auth_password: <secret> | default = global.smtp_auth_password ]
  [ auth_password_file: <string> | default = global.smtp_auth_password_file ]
  [ auth_secret: <secret> | default = global.smtp_auth_secret ]
  [ auth_identity: <string> | default = global.smtp_auth_identity ]

  # The SMTP TLS requirement.
  # Note that Go does not support unencrypted connections to remote SMTP endpoints.
  [ require_tls: <bool> | default = global.smtp_require_tls ]

  # TLS configuration.
  tls_config:
    [ <tls_config> ]

  # The HTML body of the email notification.
  [ html: <tmpl_string> | default = '{{ template "email.default.html" . }}' ]
  # The text body of the email notification.
  [ text: <tmpl_string> ]

  # Further headers email header key/value pairs. Overrides any headers
  # previously set by the notification implementation.
  [ headers: { <string>: <tmpl_string>, ... } ]

opsgenie_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The API key to use when talking to the OpsGenie API.
  [ api_key: <secret> | default = global.opsgenie_api_key ]

  # The filepath to API key to use when talking to the OpsGenie API. Conflicts with api_key.
  [ api_key_file: <filepath> | default = global.opsgenie_api_key_file ]

  # The host to send OpsGenie API requests to.
  [ api_url: <string> | default = global.opsgenie_api_url ]

  # Alert text limited to 130 characters.
  [ message: <tmpl_string> | default = '{{ template "opsgenie.default.message" . }}' ]

  # A description of the alert.
  [ description: <tmpl_string> | default = '{{ template "opsgenie.default.description" . }}' ]

  # A backlink to the sender of the notification.
  [ source: <tmpl_string> | default = '{{ template "opsgenie.default.source" . }}' ]

  # A set of arbitrary key/value pairs that provide further detail
  # about the alert.
  # All common labels are included as details by default.
  [ details: { <string>: <tmpl_string>, ... } ]

  # List of responders responsible for notifications.
  responders:
     # Exactly one of these fields should be defined.
     [ id: <tmpl_string> ]
     [ name: <tmpl_string> ]
     [ username: <tmpl_string> ]

     # "team", "teams", "user", "escalation" or "schedule".
     type: <tmpl_string>

  # Comma separated list of tags attached to the notifications.
  [ tags: <tmpl_string> ]

  # Additional alert note.
  [ note: <tmpl_string> ]

  # Priority level of alert. Possible values are P1, P2, P3, P4, and P5.
  [ priority: <tmpl_string> ]

  # Whether to update message and description of the alert in OpsGenie if it already exists
  # By default, the alert is never updated in OpsGenie, the new message only appears in activity log.
  [ update_alerts: <boolean> | default = false ]

  # Optional field that can be used to specify which domain alert is related to.
  [ entity: <tmpl_string> ]

  # Comma separated list of actions that will be available for the alert.
  [ actions: <tmpl_string> ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

pagerduty_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The routing and service keys are mutually exclusive.
  # The PagerDuty integration key (when using PagerDuty integration type `Events API v2`).
  # It is mutually exclusive with `routing_key_file`.
  routing_key: <tmpl_secret>
  # Read the Pager Duty routing key from a file.
  # It is mutually exclusive with `routing_key`.
  routing_key_file: <filepath>
  # The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).
  # It is mutually exclusive with `service_key_file`.
  service_key: <tmpl_secret>
  # Read the Pager Duty service key from a file.
  # It is mutually exclusive with `service_key`.
  service_key_file: <filepath>

  # The URL to send API requests to
  [ url: <string> | default = global.pagerduty_url ]

  # The client identification of the Alertmanager.
  [ client:  <tmpl_string> | default = '{{ template "pagerduty.default.client" . }}' ]
  # A backlink to the sender of the notification.
  [ client_url:  <tmpl_string> | default = '{{ template "pagerduty.default.clientURL" . }}' ]

  # A description of the incident.
  [ description: <tmpl_string> | default = '{{ template "pagerduty.default.description" .}}' ]

  # Severity of the incident.
  [ severity: <tmpl_string> | default = 'error' ]

  # Unique location of the affected system.
  [ source: <tmpl_string> | default = client ]

  # A set of arbitrary key/value pairs that provide further detail
  # about the incident.
  [ details: { <string>: <tmpl_string>, ... } | default = {
    firing:       '{{ template "pagerduty.default.instances" .Alerts.Firing }}'
    resolved:     '{{ template "pagerduty.default.instances" .Alerts.Resolved }}'
    num_firing:   '{{ .Alerts.Firing | len }}'
    num_resolved: '{{ .Alerts.Resolved | len }}'
  } ]

  # Images to attach to the incident.
  images:
    href: <tmpl_string>
    source: <tmpl_string>
    alt: <tmpl_string>

  # Links to attach to the incident.
  links:
    href: <tmpl_string>
    text: <tmpl_string>

  # The part or component of the affected system that is broken.
  [ component: <tmpl_string> ]

  # A cluster or grouping of sources.
  [ group: <tmpl_string> ]

  # The class/type of the event.
  [ class: <tmpl_string> ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

pushover_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The recipient user's user key.
  user_key: <secret>

  # Your registered application's API token, see https://pushover.net/apps
  # You can also register a token by cloning this Prometheus app:
  # https://pushover.net/apps/clone/prometheus
  token: <secret>

  # Notification title.
  [ title: <tmpl_string> | default = '{{ template "pushover.default.title" . }}' ]

  # Notification message.
  [ message: <tmpl_string> | default = '{{ template "pushover.default.message" . }}' ]

  # A supplementary URL shown alongside the message.
  [ url: <tmpl_string> | default = '{{ template "pushover.default.url" . }}' ]

  # Priority, see https://pushover.net/api#priority
  [ priority: <tmpl_string> | default = '{{ if eq .Status "firing" }}2{{ else }}0{{ end }}' ]

  # How often the Pushover servers will send the same notification to the user.
  # Must be at least 30 seconds.
  [ retry: <duration> | default = 1m ]

  # How long your notification will continue to be retried for, unless the user
  # acknowledges the notification.
  [ expire: <duration> | default = 1h ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

slack_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = false ]

  # The Slack webhook URL. Either api_url or api_url_file should be set.
  # Defaults to global settings if none are set here.
  [ api_url: <secret> | default = global.slack_api_url ]
  [ api_url_file: <filepath> | default = global.slack_api_url_file ]

  # The channel or user to send notifications to.
  channel: <tmpl_string>

  # API request data as defined by the Slack webhook API.
  [ icon_emoji: <tmpl_string> ]
  [ icon_url: <tmpl_string> ]
  [ link_names: <boolean> | default = false ]
  [ username: <tmpl_string> | default = '{{ template "slack.default.username" . }}' ]
  # The following parameters define the attachment.
  actions:
    text: <tmpl_string>
    type: <tmpl_string>
    # Either url or name and value are mandatory.
    [ url: <tmpl_string> ]
    [ name: <tmpl_string> ]
    [ value: <tmpl_string> ]

    [ confirm: <action_confirm_field_config> ]
       text: <tmpl_string>
       [ dismiss_text: <tmpl_string> | default '' ]
       [ ok_text: <tmpl_string> | default '' ]
       [ title: <tmpl_string> | default '' ]

    [ style: <tmpl_string> | default = '' ]
  [ callback_id: <tmpl_string> | default = '{{ template "slack.default.callbackid" . }}' ]
  [ color: <tmpl_string> | default = '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}' ]
  [ fallback: <tmpl_string> | default = '{{ template "slack.default.fallback" . }}' ]
  fields:
    title: <tmpl_string>
    value: <tmpl_string>
    [ short: <boolean> | default = slack_config.short_fields ]

  [ footer: <tmpl_string> | default = '{{ template "slack.default.footer" . }}' ]
  [ mrkdwn_in: '[' <string>, ... ']' | default = ["fallback", "pretext", "text"] ]
  [ pretext: <tmpl_string> | default = '{{ template "slack.default.pretext" . }}' ]
  [ short_fields: <boolean> | default = false ]
  [ text: <tmpl_string> | default = '{{ template "slack.default.text" . }}' ]
  [ title: <tmpl_string> | default = '{{ template "slack.default.title" . }}' ]
  [ title_link: <tmpl_string> | default = '{{ template "slack.default.titlelink" . }}' ]
  [ image_url: <tmpl_string> ]
  [ thumb_url: <tmpl_string> ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

sns_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The SNS API URL i.e. https://sns.us-east-2.amazonaws.com.
  #  If not specified, the SNS API URL from the SNS SDK will be used.
  [ api_url: <tmpl_string> ]

  # Configures AWS's Signature Verification 4 signing process to sign requests.
  sigv4:
    # The AWS region. If blank, the region from the default credentials chain is used.
    [ region: <string> ]

    # The AWS API keys. Both access_key and secret_key must be supplied or both must be blank.
    # If blank the environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` are used.
    [ access_key: <string> ]
    [ secret_key: <secret> ]

    # Named AWS profile used to authenticate.
    [ profile: <string> ]

    # AWS Role ARN, an alternative to using AWS API keys.
    [ role_arn: <string> ]

  # SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic
  # If you don't specify this value, you must specify a value for the phone_number or target_arn.
  # If you are using a FIFO SNS topic you should set a message group interval longer than 5 minutes
  # to prevent messages with the same group key being deduplicated by the SNS default deduplication window
  [ topic_arn: <tmpl_string> ]

  # Subject line when the message is delivered to email endpoints.
  [ subject: <tmpl_string> | default = '{{ template "sns.default.subject" .}}' ]

  # Phone number if message is delivered via SMS in E.164 format.
  # If you don't specify this value, you must specify a value for the topic_arn or target_arn.
  [ phone_number: <tmpl_string> ]

  # The  mobile platform endpoint ARN if message is delivered via mobile notifications.
  # If you don't specify this value, you must specify a value for the topic_arn or phone_number.
  [ target_arn: <tmpl_string> ]

  # The message content of the SNS notification.
  [ message: <tmpl_string> | default = '{{ template "sns.default.message" .}}' ]

  # SNS message attributes.
  attributes:
    [ <string>: <string> ... ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

victorops_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The API key to use when talking to the VictorOps API.
  # It is mutually exclusive with `api_key_file`.
  [ api_key: <secret> | default = global.victorops_api_key ]

  # Reads the API key to use when talking to the VictorOps API from a file.
  # It is mutually exclusive with `api_key`.
  [ api_key_file: <filepath> | default = global.victorops_api_key_file ]

  # The VictorOps API URL.
  [ api_url: <string> | default = global.victorops_api_url ]

  # A key used to map the alert to a team.
  routing_key: <tmpl_string>

  # Describes the behavior of the alert (CRITICAL, WARNING, INFO).
  [ message_type: <tmpl_string> | default = 'CRITICAL' ]

  # Contains summary of the alerted problem.
  [ entity_display_name: <tmpl_string> | default = '{{ template "victorops.default.entity_display_name" . }}' ]

  # Contains long explanation of the alerted problem.
  [ state_message: <tmpl_string> | default = '{{ template "victorops.default.state_message" . }}' ]

  # The monitoring tool the state message is from.
  [ monitoring_tool: <tmpl_string> | default = '{{ template "victorops.default.monitoring_tool" . }}' ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

webhook_configs:
  # https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The endpoint to send HTTP POST requests to.
  url: <string>

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

  # The maximum number of alerts to include in a single webhook message. Alerts
  # above this threshold are truncated. When leaving this at its default value of
  # 0, all alerts are included.
  [ max_alerts: <int> | default = 0 ]

wechat_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = false ]

  # The API key to use when talking to the WeChat API.
  [ api_secret: <secret> | default = global.wechat_api_secret ]

  # The WeChat API URL.
  [ api_url: <string> | default = global.wechat_api_url ]

  # The corp id for authentication.
  [ corp_id: <string> | default = global.wechat_api_corp_id ]

  # API request data as defined by the WeChat API.
  [ message: <tmpl_string> | default = '{{ template "wechat.default.message" . }}' ]
  # Type of the message type, supported values are `text` and `markdown`.
  [ message_type: <string> | default = 'text' ]
  [ agent_id: <string> | default = '{{ template "wechat.default.agent_id" . }}' ]
  [ to_user: <string> | default = '{{ template "wechat.default.to_user" . }}' ]
  [ to_party: <string> | default = '{{ template "wechat.default.to_party" . }}' ]
  [ to_tag: <string> | default = '{{ template "wechat.default.to_tag" . }}' ]

telegram_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The Telegram API URL i.e. https://api.telegram.org.
  # If not specified, default API URL will be used.
  [ api_url: <string> | default = global.telegram_api_url ]

  # Telegram bot token
  [ bot_token: <string> ]

  # ID of the chat where to send the messages.
  [ chat_id: <int> ]

  # Message template
  [ message: <tmpl_string> default = '{{ template "telegram.default.message" .}}' ]

  # Disable telegram notifications
  [ disable_notifications: <boolean> | default = false ]

  # Parse mode for telegram message, supported values are MarkdownV2, Markdown, HTML and empty string for plain text.
  [ parse_mode: <string> | default = "MarkdownV2" ]

  # The HTTP client's configuration.
  [ http_config: <http_config> | default = global.http_config ]

webex_configs:
  # Whether to notify about resolved alerts.
  [ send_resolved: <boolean> | default = true ]

  # The Webex Teams API URL i.e. https://webexapis.com/v1/messages
  # If not specified, default API URL will be used.
  [ api_url: <string> | default = global.webex_api_url ]

  # ID of the Webex Teams room where to send the messages.
  room_id: <string>

  # Message template
  [ message: <tmpl_string> default = '{{ template "webex.default.message" .}}' ]

  # The HTTP client's configuration. You must use this configuration to supply the bot token as part of the HTTP `Authorization` header.
  [ http_config: <http_config> | default = global.http_config ]
#}
