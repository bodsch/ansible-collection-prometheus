---

prometheus_version: 2.41.0

prometheus_service:
  log:
    level: info
  web:
    listen_address: "0.0.0.0:9090"
    enable_lifecycle: false
    enable_remote_write_receiver: false
    enable_admin_api: true

prometheus_global:
  scrape_interval: 5m
  evaluation_interval: 2m
  external_labels:
    environment: MOLECULE
    production: not
  query_log_file: ""

prometheus_alerting:
  alertmanagers:
    - scheme: http
      timeout: 10s
      api_version: ""
      path_prefix: "/"
      #file_sd_configs:
      #  - "file_sd_config"
      static_configs:
        - targets:
            - localhost
            # - remote_1
            # - remote_2
          # Labels assigned to all metrics scraped from the targets.
          labels:
            can_ignored: true

prometheus_scrape_configs:
  # Monitoring
  #
  - job_name: prometheus
    metrics_path: "{{ prometheus_metrics_path }}"
    static_configs:
      - targets:
          - "127.0.0.1:9090"
        labels:
          service: prometheus
          environment: MOLECULE


prometheus_alert_rules:
  # ----------- Management
  #
  - alert: MOLECULE - Watchdog
    expr: vector(1)
    for: 10m
    labels:
      severity: test
    annotations:
      description: >
        "This is an alert meant to ensure that the entire alerting pipeline is functional.\n
         This alert is always firing, therefore it should always be firing in Alertmanager\n
         and always fire against a receiver. There are integrations with various notification\n
         mechanisms that send a notification when this alert is not firing. For example the\n
         \"DeadMansSnitch\" integration in PagerDuty."
      summary: 'Ensure entire alerting pipeline is functional'


...
